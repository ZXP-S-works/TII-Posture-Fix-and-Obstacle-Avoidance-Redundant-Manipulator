%ZXP 用于初始化kinova D-H 模型、计算各关节控制角度。
%for kinova
clc;    % ZXP clc命令都会清除命令窗口的内容
clear all;  %ZXP clear用于清空环境变量
format long;
global d1 d2 lenK I8 T mu m n r alpha q0 xob yob zob newB oan turn D;
turn=0;
%xob=-110.4;yob=-110.1;zob=110.1;%no obstacle
%xob(1)=-0.33;yob(1)=-0.05;zob(1)=0.3;%position of obstacle point o
%xob(2)=-0.3;yob(2)=-0.07;zob(2)=0.3;
%xob(1)=0.25;yob(1)=0;zob(1)=0;  %ZXP 没有用到避障
xob(1)=-0.05;yob(1)=-0.4;zob(1)=0.28;  %ZXP 用到避障
m=3;n=3;
oan=6;newB=zeros(oan,3);%links*obstacles ZXP？？？

d1=0.05;
d2=0.10;
%D= [0.2755, 0.4100, 0.2073, 0.0743, 0.0743, 0.1425, 0.0098]; %D1~D6;E2 %ZXP corrected by ZXP in Mar 1
D= [0.2755, 0.4100, 0.2073, 0.0743, 0.0743, 0.1425, 0.0098]; %D1~D6;E2 %ZXP corrected by ZXP in Mar 1
%D= [0.2755, 0.4100, 0.2073, 0.0743, 0.0743, 0.142, 0.0098]; %D1~D6;E2 %ZXP corrected by ZXP in Mar 1
%D = [0.2755, 0.4100, 0.2073, 0.07433, 0.07433, 0.145, 0.0098]; %D1~D6;E2 %ZXP not exact
aaa = 11.0*pi/72;
ca = cos(aaa);
sa = sin(aaa);
c2a = cos(2*aaa);
s2a = sin(2*aaa);
d4b = D(3)+sa/s2a*D(4);
d5b = sa/s2a*D(4)+sa/s2a*D(5);
d6b = sa/s2a*D(5)+D(6);
lenK=[D(1),D(2),-D(7), -d4b, -d5b, -d6b];   %ZXP di & a(i-1)
%lenK of PA10:0.08
T=10;%time
% mu=5e2;
mu=1e4;
r=0.12;
alpha=0;%may need adjust

qa=[-262.6;260;86;228;104;138];%[0;0;0;0;0;0]; ZXP the unit is degree
%qa=[-255; 258.2; 79.4; 201.9; 104.5; 150.2];%[0;0;0;0;0;0]; ZXP the unit is degree
qa=(qa/180)*pi; %ZXP trasform to rad
qa=qa-[0;1/2*pi;-1/2*pi;0;pi;-10/36*2*pi]; %ZXP offset
q0=qa;%may need adjust

% qa=[-267;168;189;231;271;235];%[0;0;0;0;0;0]; ZXP the unit is degree
% q0=(qa/180)*pi; %ZXP trasform to rad

global qP qM qDp qDm;
q100=1;qd100=1;%may need adjust
%物理极限限制：qP=角度下限，qM=角度上限 ZXP corrected by ZXP in Mar 1
qP=q100*[10000;223;431;10000;10000;10000];   %ZXP 313-90=223;341+90=431
qM=[-10000;-43;109;-10000;-10000;-10000];  %ZXP 47-90=-43;19+90=109
% qP=q100*[10000;223;71;10000;10000;10000];   %ZXP not exact
% qM=[-10000;-137;-289;-10000;-10000;-10000];
rad=180/pi;qP=qP/rad;qM=qM/rad;
qDp=ones(oan,1)*1.5;
qDm=-qDp;%not real, just a test           %速度层极限
%物理极限限制：qP=角度下限，qM=角度上限，qDp=速度下限，qDm=速度上限
%options=odeset('RelTol',1e-4,'AbsTol',1e-5*ones(8+8+3+3*oan,1));
%save SYSdata d1 d2 lenK T mu r alpha q0 xob yob zob oan qP qM qDp qDm;
save SYSdata;   %ZXP 将工作区域（Workspace）里的全部变量保存

u0=zeros(6+m+n+3*oan,1);%abitrary initial
init=[q0;u0];
tic	%ZXP starts a stopwatch timer. 
[t,y]=ode15s('kinovaNet',[0:0.0005:11],init);%ode15s much better than ode15s%解刚性微分方程（J
toc %ZXP prints the elapsed time since tic was used.
time = toc; %ZXP returns the elapsed time in t.
size(t)
size(y)
save INITdata t time y;
disp('1 finished');
kinova2;